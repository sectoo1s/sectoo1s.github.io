[{"title":"Headers格式化小脚本","url":"/2022/10/03/Headers格式化小脚本/","content":"\n​\tJS逆向的时候用它来处理headers请求头。\n\n```python\n# 作者：hx\n# 开发时间：2022/8/28 2:37 下午\nimport re\n\nheaderStr = '''\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7\nCache-Control: no-cache\nConnection: keep-alive\nCookie: PHPSESSID=e20lbeo6aig5mbd4plnjvrf3v1; __btu__=96167b4df9c899d8ef48da9f26e664ecca6aae25; __btc__=fe4cda68c139654ccd067c400d321b014c44ed50; notice=0; _currentUrl_=%2FMessage; __btuc__=\"\"\nHost: www.butian.net\nPragma: no-cache\nReferer: https://www.butian.net/\nsec-ch-ua: \"Chromium\";v=\"104\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"104\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"macOS\"\nSec-Fetch-Dest: document\nSec-Fetch-Mode: navigate\nSec-Fetch-Site: same-origin\nSec-Fetch-User: ?1\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\n'''\nret = \"\"\nfor i in headerStr:\n    if i == '\\n':\n        i = \"',\\n'\"\n    ret += i\n\nret = re.sub(\": \", \"': '\", ret)\nprint(ret[3: -3])\n```\n\n输出结果如下\n\n![image-20221003211922149](https://raw.githubusercontent.com/sectoo1s/images/main/202210032119234.png)\n","tags":["python"]},{"title":"域名泛解析问题","url":"/2022/10/03/域名泛解析问题/","content":"\n#### 1、什么是泛解析？\n\n**`\t泛解析`**：是指利用 **“ \\* ”** 来做子域名，实现所有的子域名都指向同一个IP地址（记录值）。例如域名 example.com，设置泛解析 ***.example.com** 。\n\n则该域名下所有的子域名（如 a.example.com，b.example.com，c.example.com等）都将指向与 *.dns-example.com 相同的IP地址。\n\n#### 2、会有什么影响？\n\n这就导致我们在子域名信息收集的时候，会得到许多无效资产。\n\n举例说明：淘宝\n\nping 一个绝对不可能存在的域名,他解析了,那么说明他大概率使用了泛解析。\n\n![](https://raw.githubusercontent.com/sectoo1s/images/main/202210032105274.png)\n\n反观百度则是完全不同的结果，这说明它没有使用泛解析。\n\n![image-20221003210639714](https://raw.githubusercontent.com/sectoo1s/images/main/202210032106768.png)\n\n#### 3、检测小脚本\n\n```python\nimport socket\nimport sys\n\ndef dns_resolve(domain):\n    url = 'fadslkhfasnflkasnfas.' + domain\n    flag = False\n    try:\n        socket.getaddrinfo(url, None)\n        flag = True\n    except:\n        pass\n\n    if not flag:\n        print('[+]%s 未采用泛解析!' %domain)\n    else:\n        print('[+]%s 采用了泛解析!' %domain)\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print('请这样输入：python3 %s <domain>'%sys.argv[0])\n        exit(1)\n    dns_resolve(sys.argv[1])\nimport socket\nimport sys\n\ndef dns_resolve(domain):\n    url = 'fadslkhfasnflkasnfas.' + domain\n    flag = False\n    try:\n        socket.getaddrinfo(url, None)\n        flag = True\n    except:\n        pass\n\n    if not flag:\n        print('[+]%s 未采用泛解析!' %domain)\n    else:\n        print('[+]%s 采用了泛解析!' %domain)\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print('请这样输入：python3 %s <domain>'%sys.argv[0])\n        exit(1)\n    dns_resolve(sys.argv[1]\n```\n\n","tags":["DNS"]},{"title":"渗透测试面试题","url":"/2022/10/03/渗透测试面试题/","content":"\n​\t已经很久没有上班了，趁着国庆这段时间背背面试题。\n\n#### 1、渗透测试的流程\n\n![img](https://raw.githubusercontent.com/sectoo1s/images/main/202210031714078.png)\n\n\n\n#### 2、信息收集如何处理子域名爆破的泛解析问题\n\n`泛解析`:意味着我们ping一个绝对不存在的域名他都会能够给出ip地址。\n\n如何解决：可以编写一个简单的脚本去对收集到的域名进行解析。\n\n这里一定要使用一个绝对不存在的域名，比如：`asdkasdsdfsa.baidu.com`\n\n可以设置一定的次数，如果成功解析出a记录，则说明存在泛解析机制。\n\n","tags":["渗透测试"]},{"title":"AutoJS编写的支付宝转账脚本","url":"/2022/10/03/AutoJS编写的支付宝转账脚本/","content":"\n​\t最近刚看完一套JS的基础课程，还发现了autojs这个框架。\n\n我个人有一个关于支付宝的需求，就尝试着写了一下，但是还有很多bug。\n\n先不管行不行的了，先把代码保存在这里，后面有空再修改一下。\n\n```javascript\n//packageName = com.eg.android.AlipayGphone\n/* \n    通过包名打开的速度要快几十倍\n    app.launchApp(\"支付宝\")\n    app.launch(\"com.eg.android.AlipayGphone\")\n*/\n\n//定义一个点击函数\nfunction clickCenter(obj) {\n    let x = obj.bounds().centerX()\n    let y = obj.bounds().centerY()\n    click(x,y)\n}\n\n// 打开支付宝并跳转到转账页面\nfunction getStart() {\n    //启动支付宝app\n    app.launch(\"com.eg.android.AlipayGphone\")\n    sleep(3000)\n\n    //点击转账按钮\n    let obj = text(\"转账\").findOne()\n    clickCenter(obj);\n    sleep(1000)\n\n    //点击转账到支付宝\n    obj = text(\"转到支付宝\").findOne()\n    clickCenter(obj);\n    sleep(1000)\n}\n\n// 读取文件\nfunction readFile(path) {\n    let txt = open(path, mode='r', encoding='utf-8')\n    let arr = txt.readlines()\n    return arr\n}\n\n// 批量检测文本中的手机号信息\nfunction getInfo(arr) {\n    for(let i = 0 ; i < arr.length; i++) {\n    // 选中支付宝转账框并输入手机号\n        obj = id(\"com.alipay.mobile.antui:id/input_edit\").findOne()\n        clickCenter(obj);\n        sleep(random)\n        setText(Trim(arr[i]))\n\n        //点击下一步\n        obj = text(\"下一步\").findOne()\n        clickCenter(obj);\n        sleep(1000)\n        if(id(\"com.alipay.mobile.antui:id/message_content\").exists()){\n            obj = id(\"com.alipay.mobile.antui:id/buttonView\").findOne()\n            clickCenter(obj)\n            sleep(random)\n            let errNumber = id(\"com.alipay.mobile.antui:id/input_edit\").findOne()\n            log(errNumber.text() + \"手机号不存在!\")\n            continue\n        } else if(id(\"android:id/alertTitle\").exists()) {\n            obj = id(\"com.alipay.mobile.socialcontactsdk:id/user_realname\").findOne()\n            clickCenter(obj)\n            sleep(random)\n            let userName = id(\"com.alipay.mobile.transferapp:id/tf_receiveNameTextView\").findOne()\n            let phoneNumber = id(\"com.alipay.mobile.transferapp:id/tf_receiveAccountTextView\").findOne()\n            log(\"姓名:\" + userName.text() + \", 手机号:\" + arr[i])\n            sleep(random)\n\n            //返回到输入手机号页面\n            obj = id(\"com.alipay.mobile.ui:id/title_bar_back_button\").findOne()\n            clickCenter(obj)\n            continue\n        } else {\n            // 获取姓名和手机号信息\n            let userName = id(\"com.alipay.mobile.transferapp:id/tf_receiveNameTextView\").findOne()\n            let phoneNumber = id(\"com.alipay.mobile.transferapp:id/tf_receiveAccountTextView\").findOne()\n            log(\"姓名:\" + userName.text() + \", 手机号:\" + arr[i])\n            sleep(random)\n            //返回到输入手机号页面\n            obj = id(\"com.alipay.mobile.ui:id/title_bar_back_button\").findOne()\n            clickCenter(obj)\n        }\n        \n    }\n}\n\n//去除前后空格\nfunction Trim(str) {\n    return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n}\n\nconst path = '/sdcard/test/phone.txt'\nlet random = random(5,10) * 100\nlet arr = readFile(path)\ntoastLog(\"检测开始!\")\ngetStart()\ngetInfo(arr)\ntoastLog(\"检测结束!\")\n\n// 如果搜索的手机号不存在，这跳出此次循环\n// if(id(\"com.alipay.mobile.antui:id/message_content\").exists()){\n//     obj = id(\"com.alipay.mobile.antui:id/buttonView\").findOne()\n//     clickCenter(obj)\n//     sleep(1000)\n// } else {\n//     getInfo(arr)\n// }\n\n\n// 目前的问题 大概查询20次左右就会频繁或者发现代理 \n```\n\n","tags":["autojs"]},{"title":"MacOS使用scrcpy连接安卓手机","url":"/2022/09/30/MacOS使用scrcpy连接安卓手机/","content":"\n#### 1、前言\n\n想实现一个批量检测的功能，但是在PC端找不到教程。\n\n在论坛发了很多次帖子都被管理员删除了，感觉非常郁闷。\n\n看b站的时候发现了一个autojs，于是想通过这种方法操作一下。\n\n\n\n####  2、安装scrcpy\n\n由于对手机操作需要进行投屏，于是在这里先安装一个投屏软件。\n\n```javascript\nhttps://github.com/Genymobile/scrcpy\n```\n\n就是这个`scrcpy`,开源且多平台可用，直接开整。\n\n我这里用的是MacOS,直接使用brew安装。\n\n```javascript\nbrew install --cask android-platform-tools\nbrew install scrcpy\n```\n\n上面那条命令使用来安装adb的，如果没有的话先执行这个。\n\n\n\n#### 3、连接手机\n\n1. 连接usb数据线，打开usb调试，数据线连接手机，执行命令。\n   ```javascript\n   adb tcpip 5555\t//开启adb后台进行并监听5555端口\n   ```\n\n2. 拔掉数据线执行命令\n   ```javascript\n   adb connect 手机IP地址:5555\n   ```\n\n3. 终端运行`scrcpy`\n   ```javascript\n   scrcpy\n   ```\n\n   ![image-20220930154112330](https://raw.githubusercontent.com/sectoo1s/images/main/202209301541452.png)\n\n成功连接。\n\n\n\n---\n\n\n\n参考文章：https://blog.csdn.net/msn465780/article/details/127076035\n","tags":["autojs"]},{"title":"Typora基础使用方法","url":"/2022/09/29/Typora基础使用方法/","content":"\n### typora的使用方法\n\n#### 1、标题\n\n“#”符号为标题的等级，“#”符号越少标题越大，最多可以连续写六个“#”符号。输入“#”符号之后一定要加一个空格然后继续写，不然不会产生样式效果。\n\n\n\n#### 2、字体\n\n**加粗**：在字体两边分别加两个星号。\n\n*斜体*：在字体两边加一个星号。\n\n***粗体加斜体***：在字体两遍分别加三个星号。\n\n~~删除线~~：在字体两边分别加两个(～)波浪线。\n\n\n\n#### 3、引用\n\n在起始位置添加一个大于符号(>) + 空格，表示引用。\n\n> 一给我我里giaogiao！------giao哥\n\n\n\n#### 4、分割线\n\n可以用三个杠(_) + 空格\n\n___\n\n也可以用三个星号（*）+空格（这个分割线占全屏）\n\n***\n\n\n\n#### 5、图片\n\n样式（英文状态下的感叹号 加 中括号 加 小括号（ !+[ ]+()），中括号里面放图片的名字，小括号放图片的地址（图片可以是本地的图片也可以是网上的图片））。\n\n![江疏影](https://raw.githubusercontent.com/sectoo1s/images/main/202209292108314.jpeg)\n\n\n\n#### 6、超链接\n\n样式：（英文状态下的中括号 + 小括号（[ ]+( )）,中括号放超链接的名字，小括号放超链接的地址）\n\n[百度一下测试](https://baidu.com)\n\n\n\n#### 7、列表\n\n有序列表：样式(1 + .号 + 空格)\n\n1. a\n2. b\n3. c\n\n无序列表：样式(- 号 + 空格)\n\n- a\n- b\n- c\n\n#### 8、表格\n\nMac下快捷键插入：option + command + t\n\n\n\n#### 9、代码\n\n打开Typora后在编辑区输入三个点号，该键位在esc按键下方数字1的前面。然后输入html，注意要挨着三个点号不要加空格。回车后代码块出现，可在代码块中输入javascript代码，代码块右下角有指示当前语言为javascript。\n\n```javascript\nconsole.log('hello, typora!');\n```\n\n","tags":["typora"]},{"title":"NodeJS调用数据库查询手机号","url":"/2022/09/29/NodeJS调用数据库查询手机号/","content":"\n​\t最近一直在研究这个手机号，所以就搞了一个前三后四的补全方法。\n\n第一次写感觉还有很大的优化空间，不过目前可以使用就先将就一下。\n\n```javascript\n//引入程序所需要的包\nconst mysql = require(\"mysql\");\nconst readline = require(\"readline\");\n\n//创建一个数据库连接，并进行基础配置\nlet connection = mysql.createConnection({\n    host     : 'localhost',\n    user     : 'root',\n    password : 'root',\n    database : 'Database'\n  });\n\n//创建一个readline实例\nconst ql = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n})\n\n//读取用户输入的信息作为变量\nql.question(\"请输入手机号前三位数:\", (answer) => {\n    let pref = answer\n    ql.question(\"请输入手机号后四位数:\", (answer) =>{\n        let suffix = answer\n        ql.question(\"请输入手机号的省份:\", (answer) =>{\n            let province = answer\n            ql.question(\"请输入手机号的城市:\",(answer) =>{\n                let city = answer\n                console.log(pref, province, city);\n                //连接数据库并且创建查询语句，将用户输入的信息传入数据库进行匹配\n                connection.connect()\n                let phone = `SELECT phone FROM phone WHERE pref=${pref} and province='${province}' and city='${city}'`;\n                connection.query(phone, (err, result) =>{\n                    if(err){\n                        console.log('[SELECT ERROR] - ',err.message);\n                        return;\n                    }\n                    console.log('--------------------------SELECT----------------------------');\n                    //通过字符串转换将数据库中的杂乱数据进行格式化，只保留需要的手机信息\n                    let data = JSON.parse(JSON.stringify(result)) \n                    for(let i = 0; i < data.length; i++){\n                        console.log(data[i]['phone'] + `${suffix}`);\n                        // console.log(typeof(data))\n                    }\n                    console.log(`总共查询到${result.length}个手机号码`);\n                    console.log('------------------------------------------------------------\\n\\n'); \n                    connection.end()\n                    ql.close() \n                    })\n            })\n        })\n    })\n})\n```\n\n写着写着有点回调地狱的感觉了，看来后面还是需要修改的。\n\nhttps://qa.1r1g.com/sf/ask/2557869751/\n\n这文章好像可以解决，不过先不看了。\n","tags":["nodejs"]},{"title":"使用Typora-Hexo-Github创建个人博客","url":"/2022/09/18/使用Typora-Hexo-Github创建个人博客/","content":"\n费劲了千辛万苦，我终于把自己的博客网站搭建起来了。\n\n中间踩了很多很多坑，准备写一篇博客记录一下。\n\n需要准备这些东西：\n\n- github账户\n- typora软件\n- Picgo软件\n\n### Github设置\n\n####  \t\t1、创建存储库\n\n首先就是要新建一个github仓库，因为我们要将代码存放在其中。\n\n来到github个人界面的存储库位置，点击新建。\n\n![image-20220918131107828](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747215.png)\n\n\n\n这里创建的存储库名字，按照用户名.github.io来填写。\n\n一定要跟自己的名字保持一致，就像我这样。\n\n因为我已经创建过了，所以提示不可用。\n\n![image-20220918131301325](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747079.png)\n\n​\t\n\n如果你的名字不一致就会出现这种状况。\n\n它不能够直接访问，而是跟你的用户名叠加在一起，非常的不美观。\n\n![image-20220918131642135](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747918.png)\n\n\n\n​\t一致的话则可以通过 `用户名.github.io` 直接访问，就像这样高端大气上档次。\n\n![image-20220918131945517](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747594.png)\n\n\n\n#### \t2、绑定github仓库\n\n将本地信息跟github存储库关联起来，这个在创建仓库的时候会给一个提示。\n\n不会的可以去跟着学一下，操作比较简单。\t\n\n配置好之后可以在本地的命令行进行操作。\n\n​\t\n\n### hexo安装\n\n​\t安装之前要确保自己的电脑上有nodejs，不然没办法进行后续的操作。\n\n先在电脑上创建一个myBlog文件夹，然后执行以下命令来安装hexo框架。\n\n```nodejs\nsudo npm install -g hexo-cli\n```\n\n![image-20220918142304810](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747328.png)\n\n安装完成后\n\n初始化博客：**`hexo init`**\n\n静态部署：\t**`hexo g`**\n\n![](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747480.png)\n\n本地查看网页：**`hexo s`**\n\n![image-20220918142651777](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747399.png)\n\n浏览器访问 [http://localhost:4000](https://link.zhihu.com/?target=http%3A//baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%9C%80%E5%8E%9F%E5%A7%8B%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%86) 打开新部署的网页：\n\n![image-20220918142637383](https://raw.githubusercontent.com/sectoo1s/images/main/202209181747922.png)\n\n看到这个页面就说明安装成功。\n\n\n\n#### 更换主题\n\n但是我不想使用这个主题，感觉不太好看，所以我又重新找了一款。\n\n直接找到github然后clone下来，然后复制粘贴到`myBlog`的`themes`文件夹。跟着教程进行相关配置，最后是这样的。\n\n![](https://raw.githubusercontent.com/sectoo1s/images/main/202209181826469.png)\n\n#### 同步到github\n\n使用命令安装部署插件\n\n```\nnpm install hexo-deployer-git --save\n```\n\n然后执行**`hexo d`**将本地的博客部署到github\n\n![image-20220918182928609](https://raw.githubusercontent.com/sectoo1s/images/main/202209181829671.png)\n\n如果你是第一次上传则需要输入用户名和密码。\n\n**注意这里的密码是token而不是登录密码,需要去github生成。**\n\n\n\n### 使用PicGo上传图片\n\n#### 1、解析问题\n\n如果按照上述操作弄完之后，你应该会遇到一个问题。\n\n那就是在本地MarkDown插入的图片，到网页中没有办法解析。\n\n他会呈现一种破碎图片的状态，我在这里卡了很久。\n\n看了很多转换插件，但是都不太好用。\n\n**最后选择了使用picgo,体验还不错。**\n\n![image-20220918183641728](https://raw.githubusercontent.com/sectoo1s/images/main/202209181836778.png)\n\n\n\n#### 2、picgo配置操作\n\n打开typora的**`偏好设置`**,选中其中的**`图像`**，如下配置。\n\n![image-20220918184013527](https://raw.githubusercontent.com/sectoo1s/images/main/202209181840608.png)\n\n最主要的是这个picgo.app,点击下载进行安装，将你的存储库信息填写进去。\n\n![image-20220918184101280](https://raw.githubusercontent.com/sectoo1s/images/main/202209181841337.png)\n\n**这个配置中一定要创建一个新的存储库，我这里叫做images。**\n\n**不要在博客存储库下面创建文件夹，因为那样不起作用！**\n\n创建好之后点击验证，如果能够成功返回url则说明能够解析。\n\n![image-20220918184342486](https://raw.githubusercontent.com/sectoo1s/images/main/202209181843548.png)\n\n","tags":["hexo"]}]